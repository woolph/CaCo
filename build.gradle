/*
 * gradle build script
 * @author 001121673 Wolfgang Mayer
 */

buildscript {
	repositories {
		maven { url 'file://emsfile1.engel.int/vol2/SOFTWARE/TOOLS/.m2' }
		mavenCentral()
	}
	dependencies {
		classpath group: 'at.engel.gradle.plugins', name: 'gradle-svg-renderer-plugin', version: '2.1.1'
		classpath group: 'org.jetbrains.kotlin', name: 'kotlin-gradle-plugin', version: '1.3.+'
	}
}

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'svg-renderer'

defaultTasks 'run'

project.group = 'at.woolph'
project.archivesBaseName = 'caco'
project.version = new File('version').text.tokenize('.-').dropRight(1).join('.')

repositories {
	maven { url 'file://emsfile1.engel.int/vol2/SOFTWARE/TOOLS/.m2' }
	maven {url 'https://dl.bintray.com/kotlin/exposed/' }
	mavenCentral()
}

dependencies {
	compileOnly group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: '1.3.+'

	compile group: 'at.charlemagne.libs', name: 'core', version: '0.1.+'
	compile group: 'at.charlemagne.libs', name: 'file', version: '0.1.+'

	compile group: 'org.jetbrains.exposed', name: 'exposed', version: '0.11.2'
	runtime group: 'com.h2database', name: 'h2', version: '1.4.197'
	compile 'org.json:json:20180813'
	compile group: 'com.opencsv', name: 'opencsv', version: '4.4'

	testCompileOnly group: 'junit', name: 'junit', version: '4.12'
}

test {
	useJUnitPlatform()
}

project.mainClassName = 'at.woolph.caco.MainKt'

sourceCompatibility = '1.8'
compileKotlin.kotlinOptions.jvmTarget = sourceCompatibility
compileTestKotlin.kotlinOptions.jvmTarget = sourceCompatibility
compileJava.options.encoding = 'UTF-8'

svgRenderer {
	def svgIcon = new File(sourceSets.main.resources.srcDirs.iterator()[0], 'icon.svg')

	icon 'appIcon', [ svgSourceFile: svgIcon, outputFile: new File(buildDir, 'tmp/icon.ico'), resolutions: [16,32,64,128,256] ]
	image 'splashScreen', [ svgSourceFile: svgIcon, outputFile: new File(sourceSets.main.output.resourcesDir, 'splash-screen.png'), width: 256 ]

	image svgSourceFile: svgIcon, outputFile: new File(sourceSets.main.output.resourcesDir, 'at/engel/tools/%PROJECT_NAME%/icon.png'), width: 64
}

jar {
	manifest {
		attributes 'Main-Class': project.mainClassName
		attributes 'SplashScreen-Image': renderSvg.resourceImage['splashScreen']
	}
 
	from {
		configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
		configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

applicationDefaultJvmArgs = [
	"-Dapplication.name=${project.name}",
	"-Dapplication.fullversion=${project.version}",
]

run {
	//args 'opc.tcp://192.168.110.1:4840/'
	//args 'C:\\c2k\\localstartup\\215310\\1\\backup'
	//args '--debug'
	//args '--showNeeded'
	//args '--importBase=grn,m19,dom,rix,xln', '--importInventory=C:\\Users\\001121673\\Downloads\\Inventory.csv', '--showNeeded'
	args '--showNeededDeck'
}
